// 作用域
/**
 * 在js中，可以把作用域理解为一套规则，
 * 该规则用来管理引擎如何在当前作用域及嵌套的子作用域
 * 根据标记符(变量名/函数名)进行变量查找
 */
// 
/**
 * JavaScript代码的整个执行过程，分为两个阶段：
 * 代码编译阶段与代码执行阶段。
 * 编译阶段由编译器完成，将代码翻译成可执行代码，这个阶段作用域规则会确定。
 * 执行阶段由引擎完成，主要任务是执行可执行代码，执行上下文在这个阶段创建。
 */
// 

/**
 * 执行上下文生命周期
 * 创建 ->{
 * 	生成变量对象
 * 	建立作用域链
 * 	确定this的指向
 * } 
 *执行 ->{
 *	变量赋值
 *	函数引用
 *	执行其他代码
 *}
 *
 *出栈--等待被回收
 * 
 */
/**
 * 作用域链
 * 由当前环境和上层环境的一系列变量对象组成，
 * 它保证了当前执行环境对符合权限的变量和函数的访问。
 */

/**
 * 作用域与作用域链
 *
 * 作用域是一套规则，作用域链是这套规则的具现
 */





// 
// 
// for (var i = 0; i <=2 ; i++) {
// 	(function(i) {
// 		setTimeout(function() {
// 			console.log(i)
// 		}, (3-i) * 1000);
// 	})(i);
// }

// }
// 
// 
// 
// 
// 
var  fn;
function foo(){
	var a = 10;

	function bar(){
		console.log(a);
	}

	fn = bar;
}

function bar2(){
	fn();
}

foo();
bar2();

